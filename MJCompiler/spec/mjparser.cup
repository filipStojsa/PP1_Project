package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/* Terminals */

terminal PROG;
terminal BREAK;
terminal CLASS;
terminal ENUM;
terminal ELSE;
terminal CONST;
terminal IF;
terminal DO;
terminal WHILE;
terminal NEW;
terminal PRINT;
terminal READ;
terminal RETURN;
terminal VOID;
terminal EXTENDS;
terminal CONTINUE;
terminal FOREACH;

terminal String IDENT;

terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOLEAN;


terminal PLUS;
terminal MINUS;
terminal EQ;
terminal MUL;
terminal DIV;
terminal MOD;
terminal EQ_CMP;
terminal NEQ_CMP;
terminal GREATER;
terminal GREATER_EQ;
terminal LESS;
terminal LESS_EQ;
terminal AND;
terminal OR;
terminal INCREMENT;
terminal DECREMENT;
terminal COL;
terminal SEMICOL;
terminal COMMA;
terminal DOT;
terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal LBRACE;
terminal RBRACE;
terminal ARROW;

/* NonTerminals */

nonterminal DeclarationList, VarDecl, VarDeclType, VarDeclList, MoreVarDeclarations, 
LastVarDeclarations, ConstDecl, ConstType, ConstDeclList, ClassDecl, ClassBodyList, ClassVarDecl, InnerClassSection, MethodDeclList, 
FormParsList, MethodVarDeclList, StatementList, IfElseEpsilon, IfStartHelper,
IfCondition, WhileCondition, DesignatorStatement, DesignatorList, ActPars, 
ActParsList, Condition, CondTerm, ActParameter, DesignatorForActPars, HelperCondFact, HelperCondTerm,
Label, Assignop, Relop, Addop, Mulop, FormPars, FormParsDecl, ArryDesignator, BeginWhile, BeginBreak, DesignatorForFunc, ExpryMinusDummy, ExprMinus;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodReturnType, MethodDecl, BeginClassDecl, Designator, ForeachIdent, OptDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstDeclarations, Statement, Expr, OptExtend, Factor, ForeachDesignator, ExprTermList, Term, FactorList, CondFact, AdditionalPrint;

/* Grammar */

precedence left ELSE;


Program ::= (Program) PROG ProgName:prog DeclarationList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclarationList ::= (DeclarationLists) DeclarationList VarDecl
				| (ConstListDeclarations) DeclarationList ConstDecl
				| (ClassDeclarations) DeclarationList ClassDecl
				| (NoDeclarations) /* epsilon */
				;

/* VarDecl */

VarDecl ::= (VarDecl) VarDeclType VarDeclList;

VarDeclType ::= (VarDeclType) Type:varType;

/* OVDE IMAS DESNU REKURZIJU */

VarDeclList ::= (VarDeclarations) MoreVarDeclarations VarDeclList
			| (NoVarDeclarations) LastVarDeclarations
			;

MoreVarDeclarations ::= (MoreVarDeclsArray) IDENT:nameVar LBRACKET RBRACKET COMMA
					| (MoreVarDeclNoArray) IDENT:nameVar COMMA
					| (ErrMoreVarDeclarations) error COMMA
					;
					
LastVarDeclarations ::= (LastVarDeclArray) IDENT:nameVar LBRACKET RBRACKET SEMICOL
					| (LastVarDeclNoArray) IDENT:nameVar SEMICOL
					| (ErrLastVarDeclarations) error SEMICOL
					;

Type ::= (Type) IDENT:typeName;

/* ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst | charConst | boolConst)} ";" */
ConstDecl ::= (ConstDecl) CONST ConstType ConstDeclList SEMICOL;

ConstType ::= (ConstType) Type:constType;

ConstDeclList ::= (ConstDeclarationLists) ConstDeclList COMMA ConstDeclarations
				| (NoConstDeclarations) ConstDeclarations
				;
				
ConstDeclarations ::= (ConstDeclarationNum) IDENT:nameConst EQ NUMBER:value
					| (ConstDeclarationChar) IDENT:nameConst EQ CHAR:value
					| (ConstDeclarationBool) IDENT:nameConst EQ BOOLEAN:value
					;

/* ClassDecl = "class" ident ["extends" Type] "{" {VarDecl} ["{" {ConstructorDecl} {MethodDecl} "}"] "}". */
ClassDecl ::= (ClassDecl) BeginClassDecl LBRACE ClassBodyList RBRACE;

BeginClassDecl ::= (BeginClassDecl) CLASS IDENT:className OptExtend;

OptExtend ::= (WithClassExtend) EXTENDS Type:extClassName
			| (NoClassExtend) /* epsilon */
			;

ClassBodyList ::= (ClassBody) ClassVarDecl InnerClassSection;

ClassVarDecl ::= (WithClassVarDecl) ClassVarDecl VarDecl
				| (NoClassVarDecl) /* epsilon */
				;
				
InnerClassSection ::= (WithInnerClassSection) LBRACE MethodDeclList RBRACE
					| (NoInnerClassSection) /* epsilon */
					;

MethodDeclList ::= (MultipleMethodsDecl) MethodDeclList MethodDecl
				| (SingleMethodDecl) /* epsilon */
				;

/* MethodDecl */

MethodDecl ::= (MethodDecl) MethodReturnType LPAREN FormParsList RPAREN MethodVarDeclList LBRACE StatementList RBRACE;

/* FormPars */

FormParsList ::= (FormParameters) FormPars
				| (NoFormParameters) /* epsilon */
				;
				
FormPars ::= (FormParsMultiple) FormPars COMMA FormParsDecl
			| (FormParsSingle) FormParsDecl
			| (ErrFormParsComma) FormParsDecl error COMMA
			| (ErrFormParsRParen) error
			;
			
FormParsDecl ::= (FormParsDeclBrackets) Type IDENT:name LBRACKET RBRACKET
				| (FormParsDeclNoBrackets) Type IDENT:name
				;

MethodReturnType ::= (MethodRetVoid) VOID IDENT:nameMeth
					| (MethodRetType) Type IDENT:nameMeth
					;

MethodVarDeclList ::= (MethodVars) MethodVarDeclList VarDecl
					| (NoMethodVars) /* epsilon */
					;


/* Statement */

StatementList ::= (Statements) StatementList Statement
				| (NoStmt) /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement SEMICOL
			| (IfStmt) IfCondition
			| (IfElseStmt) IfCondition ELSE IfElseEpsilon Statement
			| (WhileStmt) BeginWhile WhileCondition
			| (BreakStmt) BeginBreak SEMICOL
			| (ContinueStmt) CONTINUE SEMICOL
			| (ReturnStmt) RETURN Expr SEMICOL
			| (ReturnStmtNoExpr) RETURN SEMICOL
			| (ReadStmt) READ LPAREN Designator RPAREN SEMICOL
			| (ForeachStmt) ForeachDesignator ForeachIdent ARROW Statement RPAREN SEMICOL
			| (PrintStmt) PRINT LPAREN Expr AdditionalPrint RPAREN SEMICOL
			| (StatementListWithBraces) LBRACE StatementList RBRACE
			;

AdditionalPrint ::= (WithAdditionalPrint) COMMA NUMBER:printW
				| (NoAdditionalPrint) /* epsilon */
				;

BeginWhile ::= (BeginWhile) WHILE;

BeginBreak ::= (BeginBreak) BREAK;

ForeachDesignator ::= (ForeachDesignator) Designator DOT FOREACH LPAREN;

ForeachIdent ::= (ForeachIdent) IDENT:name;

IfElseEpsilon ::= (IfElseEpsilon) /* epsilon */;

IfCondition ::= (IfConditionOk) IF IfStartHelper Condition HelperCondTerm RPAREN Statement
				| (ErrIfCondition) IF IfStartHelper error RPAREN
				;

IfStartHelper ::= (IfStartHelper) LPAREN;

WhileCondition ::= (WhileCondition) LPAREN Condition RPAREN Statement;


/* Designator */

DesignatorStatement ::= (DesignatorAssignop) Designator Assignop Expr
					| (ErrDesignatorStatement) error
					| (DesignatorActPars) DesignatorForActPars LPAREN ActPars RPAREN		/*ActPars mora biti epsilon*/
					| (DesignatorIncrement) Designator INCREMENT
					| (DesignatorDecrement) Designator DECREMENT
					| (DesignatorsList) LBRACKET DesignatorList RBRACKET EQ Designator
					;

DesignatorForFunc ::= (DesignatorForFunc) Designator;

Designator ::= (DesignatorForFields) Designator DOT IDENT
			| (DesignatorForExpression) ArryDesignator LBRACKET Expr RBRACKET
			| (DesignatorIdent) IDENT:nameDesignator
			;
			
DesignatorList ::= (MoreDesignators) DesignatorList COMMA OptDesignator
				| (SingleDesignator) OptDesignator
				;
				
OptDesignator ::= (OptDesignatorExsists) Designator
				| (NoOptDesignator) /* epsilon */
				;
				
ArryDesignator ::= (ArryDesignator) Designator;
			
/* ActPars*/

ActPars ::= (ActParams) ActParsList
			| (NoActParams) /* epsilon */
			;
			
ActParsList ::= (MoreActPars) ActParsList COMMA ActParameter
			| (SingleActPar) ActParameter
			;

ActParameter ::= (ActParameter) Expr;

/* Condition */

Condition ::= (CondTermMultiple) Condition HelperCondFact OR CondTerm
			| (ContTermSingle) CondTerm
			;
			
CondTerm ::= (CondFactMultiple) CondTerm AND CondFact
			| (CondFactSingle) CondFact
			;

HelperCondTerm ::= (HelperCondTerm) /* epsilon */;
HelperCondFact ::= (HelperCondFact) /* epsilon */;

CondFact ::= (CondFactMultipleExpr) Expr:first Relop Expr:second
			| (CondFactSingleExpr) Expr
			;


/* Expressions */
	 
ExprMinus ::= (ExprMinusWith) MINUS
			| (ExprMinusWithout) /* epsilon */
			;

Expr ::= (ExprWith) ExprMinus Term ExpryMinusDummy ExprTermList;

ExpryMinusDummy ::= (ExpryMinusDummy) /* epsilon */;

ExprTermList ::= (ExprTermMultiple) ExprTermList Addop Term
				| (ExprTermSingle) /* epsilon */
				;

Term ::= (Term) FactorList;

FactorList ::= (TermMultipleFactors) FactorList Mulop Factor
			| (TermSingleFactors) Factor
			;
			
Factor ::= (FactorWithActPars) DesignatorForActPars LPAREN ActPars RPAREN
		| (FactorNoParens) Designator
		| (FactorNumConst) NUMBER
		| (FactorCharConst) CHAR
		| (FactorBoolConst) BOOLEAN
		| (FactorNewExpr) NEW Type LBRACKET Expr RBRACKET
		| (FactorNewActPars) NEW Type LPAREN ActPars RPAREN  	/* OBRISI, NE TREBA TI */
		| (FactorExpr) LPAREN Expr RPAREN
		;

DesignatorForActPars ::= (DesignatorForActPars) Designator;

Label ::= (Label) IDENT;

Assignop ::= (Assignop) EQ;

Relop ::= (EqOp) EQ_CMP
		| (NeqOp) NEQ_CMP
		| (GreaterOp) GREATER
		| (GreaterEqOp) GREATER_EQ 
		| (LessOp) LESS 
		| (LessEqOp) LESS_EQ
		;

Addop ::= (PlusOp) PLUS
		| (MinusOp) MINUS
		;
		
Mulop ::= (MultiplyOp) MUL
		| (DivOp) DIV
		| (ModOp) MOD
		;


